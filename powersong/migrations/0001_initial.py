# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-10-15 17:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActivitiesToIgnore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.CharField(max_length=16, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('act_type', models.PositiveSmallIntegerField()),
                ('distance', models.FloatField()),
                ('moving_time', models.IntegerField()),
                ('elapsed_time', models.IntegerField()),
                ('calories', models.IntegerField(blank=True, null=True)),
                ('suffer_score', models.IntegerField(blank=True, null=True)),
                ('start_date', models.DateTimeField()),
                ('start_date_local', models.DateTimeField()),
                ('upload_id', models.CharField(blank=True, max_length=100, null=True)),
                ('embed_token', models.CharField(blank=True, max_length=100, null=True)),
                ('workout_type', models.PositiveSmallIntegerField()),
                ('avg_speed', models.FloatField()),
                ('max_speed', models.FloatField()),
                ('avg_cadence', models.FloatField(blank=True, null=True)),
                ('avg_temp', models.FloatField(blank=True, null=True)),
                ('avg_hr', models.FloatField(blank=True, null=True)),
                ('max_hr', models.IntegerField(blank=True, null=True)),
                ('last_sync_date', models.DateTimeField(null=True)),
                ('avg_watts', models.FloatField(blank=True, null=True)),
                ('max_watts', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('mb_id', models.UUIDField(blank=True, null=True, unique=True)),
                ('listeners_count', models.IntegerField(blank=True, null=True)),
                ('plays_count', models.IntegerField(blank=True, null=True)),
                ('last_sync_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('athlete_id', models.CharField(max_length=12, unique=True)),
                ('profile_image_url', models.URLField()),
                ('first_login', models.BooleanField()),
                ('email', models.EmailField(max_length=254)),
                ('date_preference', models.CharField(max_length=10)),
                ('measurement_preference', models.PositiveSmallIntegerField()),
                ('sex', models.PositiveSmallIntegerField()),
                ('country', models.CharField(max_length=50)),
                ('athlete_type', models.PositiveSmallIntegerField(choices=[(0, 'Running'), (1, 'Cycling'), (2, 'Other')])),
                ('last_sync_date', models.DateTimeField(blank=True, null=True)),
                ('activity_count', models.IntegerField()),
                ('runs_count', models.IntegerField()),
                ('rides_count', models.IntegerField()),
                ('first_activity_date', models.DateTimeField(blank=True, null=True)),
                ('last_activity_date', models.DateTimeField(blank=True, null=True)),
                ('updated_strava_at', models.DateTimeField()),
                ('last_celery_task_id', models.UUIDField(blank=True, null=True)),
                ('strava_token', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Effort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('act_type', models.PositiveSmallIntegerField()),
                ('idx_in_activity', models.PositiveSmallIntegerField()),
                ('start_time', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('start_distance', models.FloatField()),
                ('distance', models.FloatField()),
                ('avg_speed', models.FloatField()),
                ('diff_last_speed', models.FloatField()),
                ('diff_avg_speed', models.FloatField()),
                ('diff_last_speed_s', models.FloatField()),
                ('diff_avg_speed_s', models.FloatField()),
                ('avg_hr', models.FloatField(blank=True, null=True)),
                ('diff_avg_hr', models.FloatField(blank=True, null=True)),
                ('diff_last_hr', models.FloatField(blank=True, null=True)),
                ('avg_cadence', models.FloatField(blank=True, null=True)),
                ('diff_avg_cadence', models.FloatField(blank=True, null=True)),
                ('diff_last_cadence', models.FloatField(blank=True, null=True)),
                ('total_ascent', models.FloatField()),
                ('total_descent', models.FloatField()),
                ('avg_watts', models.FloatField(blank=True, null=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='powersong.Activity')),
            ],
        ),
        migrations.CreateModel(
            name='Listener',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=30, unique=True)),
                ('real_name', models.CharField(max_length=30)),
                ('profile_image_url', models.URLField()),
                ('country', models.CharField(max_length=50)),
                ('age', models.PositiveSmallIntegerField()),
                ('scrobble_count', models.IntegerField()),
                ('last_sync_date', models.DateTimeField(null=True)),
                ('last_scrobble_date', models.DateTimeField(blank=True, null=True)),
                ('lastfm_token', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PowerUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='powersong.Athlete')),
                ('listener', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='powersong.Listener')),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('artist_name', models.CharField(max_length=100)),
                ('duration', models.IntegerField(blank=True, null=True)),
                ('listeners_count', models.IntegerField(blank=True, null=True)),
                ('plays_count', models.IntegerField(blank=True, null=True)),
                ('last_sync_date', models.DateTimeField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('mb_id', models.UUIDField(blank=True, null=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='powersong.Artist')),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('url', models.URLField()),
                ('reach', models.IntegerField()),
                ('taggings_count', models.IntegerField()),
                ('last_sync_date', models.DateTimeField()),
            ],
        ),
        migrations.AddField(
            model_name='song',
            name='tags',
            field=models.ManyToManyField(to='powersong.Tags'),
        ),
        migrations.AddField(
            model_name='effort',
            name='song',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='powersong.Song'),
        ),
        migrations.AddField(
            model_name='artist',
            name='tags',
            field=models.ManyToManyField(to='powersong.Tags'),
        ),
        migrations.AddField(
            model_name='activity',
            name='athlete',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='powersong.Athlete'),
        ),
    ]
